from aiogram import types
from aiogram.fsm.context import FSMContext

from api import (
    Telegram,
    ApiClient,
    create_anonymous_user,
    register_user,
    update_subscribe,
    get_program,
    get_approaches,
    get_trainings,
    get_nutritions,
    get_programs
)
from keyboards import (
    start_keyboard,
    create_my_health_keyboard,
    start_callback_keyboard,
    create_training_keyboard,
    balance_keyboard,
    create_content_keyboard,
    create_info_keyboard,
    create_activity_keyboard,
    ID,
    Schedule,
    Content,
)
from notifications import scheduler
from states import (
    ProgramState,
    NutritionState,
    SubscribeState,
    ScheduleState,
    ApproachState,
    CaloriesState,
    InfoState,
    Cycle,
    Iterable
)
from models import (
    TelegramUser,
    Subscriber,
    TrainingProgram
)


async def start(message: types.Message, state: FSMContext):
    await state.clear()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    user: TelegramUser = await register_user(client, instance)
    if user:
        msg: str = f"–ü—Ä–∏–≤–µ—Ç {user.first_name} {user.last_name} üëãÔ∏è\n\n" \
                   "–Ø <b>—Å–ø–æ—Ä—Ç-–±–æ—Ç</b>, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å" \
                   "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
    else:
        msg: str = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ú–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ</b>, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è " \
                   "–æ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ\n\n" \
                   "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <b>—Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="HTML")


async def account(message: types.Message, state: FSMContext, client: ApiClient, args):
    await state.clear()
    user: TelegramUser = await client.get_user(*args, cache=True)
    await message.reply(user.message, reply_markup=balance_keyboard, parse_mode="HTML")


async def info(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await Telegram.send_message(
        call.from_user.id,
        "–û –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
        reply_markup=create_info_keyboard()
        )
    await state.set_state(InfoState.info)


async def subscribe(message: types.Message, state: FSMContext, client: ApiClient, args):
    await state.clear()
    await client.create_subscriber(*args)
    msg = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é <b>–ú–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ ü´ÄÔ∏è</b>, " \
          "—á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö"
    await message.answer(msg, parse_mode="HTML")


async def programs(message: types.Message, state: FSMContext):
    await state.clear()
    try:
        instances = iter(Cycle(await get_programs()))
        instance = instances.__next__()
        await Telegram.send_message(
            message.from_user.id,
            instance.message, parse_mode="HTML",
            reply_markup=create_content_keyboard(instance, training_program=instance.id)
        )
        await state.update_data({"programs": instances, "id": instance.id})
        await state.set_state(ProgramState.next_program)
    except ValueError:
        await message.reply("–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç")


async def nutritions(message: types.Message, state: FSMContext):
    await state.clear()
    instances = iter(Cycle(await get_nutritions()))
    nutrition = instances.__next__()

    await Telegram.send_message(
        message.from_user.id,
        nutrition.message, parse_mode="HTML",
        reply_markup=create_content_keyboard(nutrition)
    )

    await state.update_data({"nutritions": instances, "id": nutrition.id})
    await state.set_state(NutritionState.next_nutrition)


async def my_health(message: types.Message, state: FSMContext, subscriber: Subscriber):
    await state.clear()
    await message.reply(
        subscriber.message,
        parse_mode="HTML",
        reply_markup=create_my_health_keyboard(
            scheduler.get_job(str(message.from_user.id)) is None,
            id=subscriber.training_program
        )
    )


async def update_my_health(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç üë∂Ô∏è-üßìÔ∏è",
    )
    await state.set_state(SubscribeState.age)


async def calculate_calories(call: types.CallbackQuery, state: FSMContext, subscriber: Subscriber):
    await state.clear()
    if subscriber.is_kfc_valid:
        await Telegram.send_message(
            call.from_user.id,
            "–ö–∞–∫–∞—è —É –í–∞—Å –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?", reply_markup=create_activity_keyboard()
        )
        await state.update_data({
                'age': subscriber.age,
                'weight': subscriber.weight,
                'height': subscriber.height,
                'gender': subscriber.gender
            })
        await state.set_state(CaloriesState.activity)
    else:
        await Telegram.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!")


async def buy_content(call: types.CallbackQuery, callback_data: Content, state: FSMContext):
    await state.clear()
    data = {
        "training_program": callback_data.training_program,
        "sport_nutrition": callback_data.sport_nutrition
    }
    if await update_subscribe(call.from_user, data):
        await call.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    else:
        await call.message.edit_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –±—ã–ª –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


async def program(call: types.CallbackQuery, callback_data: ID, state: FSMContext):
    await state.clear()
    instance = await get_program(call.from_user, {"id": callback_data.id})
    if isinstance(instance, TrainingProgram):
        await call.message.answer(instance.message, parse_mode="HTML")
    else:
        msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n" \
              "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º"
        await call.message.answer(msg)


async def schedule(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    msg = "–°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b>—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b> –∏–ª–∏\n" \
          "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã <b>–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n" \
          "(—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)"
    await Telegram.send_message(
        call.message.chat.id,
        msg,
        reply_markup=start_callback_keyboard(Schedule, ["–Ø —Å–¥–µ–ª–∞—é –≤—Å–µ —Å–∞–º", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"]),
        parse_mode="HTML"
    )
    await state.set_state(ScheduleState.weekdays)


async def disable_schedule(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if scheduler.get_job(str(call.from_user.id)):
        scheduler.remove_job(str(call.from_user.id))
    await Telegram.send_message(
        call.from_user.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!"
    )


async def approaches(message: types.Message, state: FSMContext, subscriber: Subscriber):
    await state.clear()
    if program_id := subscriber.training_program:
        trainings = iter(Iterable([
            training.id for training in
            await get_trainings({"program_id": program_id})
        ]))
        if trainings.loop:
            instances = iter(
                Cycle(await get_approaches(
                    message.from_user, {"training_id": next(trainings)}
                ))
            )
            approach = next(instances)
            await Telegram.send_message(
                message.from_user.id, approach.message,
                reply_markup=create_training_keyboard(), parse_mode="HTML"
            )
            await state.update_data({"trainings": trainings, "approaches": instances})
            await state.set_state(ApproachState.next_approach)
        else:
            await message.reply(
                "–¢–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
            )
    else:
        await message.reply(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
        )
