from typing import List

from aiogram import types
from aiogram.dispatcher import FSMContext

from api import ApiClient, create_anonymous_user, register_user, create_admin_user
from keyboards import (
    start_keyboard,
    create_my_health_keyboard,
    filter_keyboard
)
from states import (
    ProgramState,
    NutritionState,
    SubscribeState
)
from models import (
    TelegramUser,
    Token,
    TrainingProgram,
    Nutrition,
    Training
)
from notifications import scheduler


async def start(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    await register_user(client, instance)
    msg: str = "–ü—Ä–∏–≤–µ—Ç üëãÔ∏è –Ø *—Å–ø–æ—Ä—Ç\-–±–æ—Ç*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å\n" \
               "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="MarkdownV2")


async def account(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        msg = user.message
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.reply(msg, parse_mode="HTML")


async def subscribe(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.create_subscriber(instance, token)
        msg: str = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    await message.answer(msg)


async def programs(message: types.Message, state: FSMContext):
    await state.finish()
    await message.bot.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await ProgramState.program_filter.set()


async def nutritions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.bot.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await NutritionState.nutrition_filter.set()


async def my_health(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        if subscriber := user.subscriber:
            await message.reply(
                subscriber.message,
                parse_mode="HTML",
                reply_markup=create_my_health_keyboard(
                    sport_nutrition=subscriber.sport_nutrition,
                    training_program=subscriber.training_program
                )
            )
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def update_subscribe(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç üë∂Ô∏è-üßìÔ∏è",
    )
    await SubscribeState.age.set()


async def get_trainings(message: types.Message, data: dict = None):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        trainings: List[Training] = await client.get_trainings(
            instance, token,
            cache=True, data=data
        )
        for training in trainings:
            await message.reply(training.message_short, parse_mode="HTML")
        await message.reply(
            "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫" if trainings else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç("
        )
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_approaches(message: types.Message):
    pass


async def get_program(call: types.CallbackQuery, callback_data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(data=call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        id = int(callback_data.get("id", 0))
        program: TrainingProgram = await client.get_program(
            instance, token,
            cache=True,
            data={"id": id}
        )
        if isinstance(program, TrainingProgram):
            await call.message.answer(program.message, parse_mode="HTML")
        else:
            msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n" \
                  "–í–≤–µ–¥–∏—Ç–µ /programs, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
            await call.message.answer(msg)
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_nutrition(call: types.CallbackQuery, callback_data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        id = int(callback_data.get("id", 0))
        nutrition: Nutrition = await client.get_nutrition(
            instance, token,
            cache=True,
            data={"id": id}
        )
        if isinstance(nutrition, Nutrition):
            await call.message.answer(nutrition.message, parse_mode="HTML")
        else:
            msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\n" \
                  "–í–≤–µ–¥–∏—Ç–µ /nutritions, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
            await call.message.answer(msg)
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_training(call: types.CallbackQuery, callback_data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        id = int(callback_data.get("id", 0))
        training: Training = await client.get_training(
            instance, token,
            data={"id": id}
        )
        if isinstance(training, Training):
            keyboard = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="approaches")
            )
            await call.message.answer(
                training.message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n" \
                  "–í–≤–µ–¥–∏—Ç–µ /programs, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
            await call.message.answer(msg)
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def send_notification(message: types.Message):
    await message.bot.send_message(
        message.from_user.id,
        "–ü–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
    )
