import asyncio
from typing import List

from aiogram import types

from api import ApiClient, create_anonymous_user, register_user, create_admin_user
from keyboards import (
    start_keyboard,
    create_filter_keyboard,
    program as program_filter,
    nutrition as nutrition_filter
)
from models import TelegramUser, Token, TrainingProgram, Nutrition, Training, Subscriber


async def send_welcome(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    await register_user(client, instance)
    msg: str = "–ü—Ä–∏–≤–µ—Ç üëãÔ∏è –Ø *—Å–ø–æ—Ä—Ç\-–±–æ—Ç*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å\n" \
               "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="MarkdownV2")


async def get_account_info(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        msg = user.message
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.reply(msg, parse_mode="HTML")


async def subscribe(call: types.CallbackQuery):
    await create_subscribe(call.message)


async def create_subscribe(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.create_subscriber(instance, token)
        msg: str = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    await message.answer(msg)


async def update_subscribe(message: types.Message, data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.update_subscriber(
            instance, token,
            data=data
        )
        await get_my_health(message)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def get_my_health(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(
            instance, token, cache=True
        )
        subscriber = await client.get_subscriber(
            user, token,
            data={"telegram_id": user.subscriber},
            cache=True
        )
        if isinstance(subscriber, Subscriber):
            keyboard = types.InlineKeyboardMarkup(2).add(
                types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=program_filter.new(
                    id=subscriber.training_program if subscriber.training_program else 0
                )),
                types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="filter_subscribe")
            )
            await message.reply(
                subscriber.message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def get_programs(message: types.Message, data: dict = None):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        instances: list[TrainingProgram] = await client.get_programs(
            instance,
            token,
            data=data,
            cache=True
        )
        for program in instances:
            program_keyboard = types.InlineKeyboardMarkup(2).add(
                types.InlineKeyboardButton(
                    "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚úÖÔ∏è",
                    callback_data="subscribe"
                ),
                types.InlineKeyboardButton(
                    text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ...",
                    callback_data=program_filter.new(
                        id=program.id
                    )
                )
            )
            await message.reply(program.message_short,
                                reply_markup=program_keyboard,
                                parse_mode="HTML")
        msg = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º üóíÔ∏è" if instances else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç üòîÔ∏è"
        await message.reply(msg, reply_markup=create_filter_keyboard("filter_programs", len(instances)))
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def get_nutritions(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        nutritions: List[Nutrition] = await client.get_nutritions(
            instance, token,
            cache=True,
            data={}
        )
        for nutrition in nutritions:
            nutrition_keyboard = types.InlineKeyboardMarkup(2).add(
                types.InlineKeyboardButton(
                    "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚úÖÔ∏è",
                    callback_data="subscribe"
                ),
                types.InlineKeyboardButton(
                    text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ...",
                    callback_data=nutrition_filter.new(
                        id=nutrition.id
                    )
                )
            )
            await message.reply(nutrition.message_short,
                                reply_markup=nutrition_keyboard,
                                parse_mode="HTML")
        await message.reply(
            "–°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫" if nutritions else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(",
            reply_markup=create_filter_keyboard("filter_nutritions", len(nutritions))
        )
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_trainings(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        trainings: List[Training] = await client.get_trainings(
            instance, token,
            cache=True, data={}
        )
        msg = "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        for training in trainings:
            msg += f"\n\n{training.name}:\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {training.description}"
        await message.reply(msg if msg else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_program(call: types.CallbackQuery, callback_data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(data=call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        id = int(callback_data.get("id", 0))
        program: TrainingProgram = await client.get_program(
            instance, token,
            cache=True,
            data={"id": id}
        )
        if isinstance(program, TrainingProgram):
            await call.message.answer(program.message, parse_mode="HTML")
        else:
            await call.message.answer("–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_nutrition(call: types.CallbackQuery, callback_data: dict):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        id = int(callback_data.get("id", 0))
        nutrition: Nutrition = await client.get_nutrition(
            instance, token,
            cache=True,
            data={"id": id}
        )
        if isinstance(nutrition, Nutrition):
            await call.message.answer(nutrition.message, parse_mode="HTML")
        else:
            await call.message.answer("–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")
