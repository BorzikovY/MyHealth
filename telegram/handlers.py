from aiogram import types
from aiogram.dispatcher import FSMContext

from api import (
    Telegram,
    ApiClient,
    create_anonymous_user,
    register_user,
    update_subscribe,
    get_program,
    get_nutrition,
    get_approaches,
    get_trainings
)
from keyboards import (
    start_keyboard,
    create_my_health_keyboard,
    filter_keyboard,
    start_schedule_keyboard,
    create_training_keyboard,
    activity_keyboard
)
from notifications import scheduler
from states import (
    ProgramState,
    NutritionState,
    SubscribeState,
    ScheduleState,
    ApproachState,
    CaloriesState,
    Cycle,
    Iterable
)
from models import (
    TelegramUser,
    Subscriber,
    Token,
    TrainingProgram,
    Nutrition,
)


async def start(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    user: TelegramUser = await register_user(client, instance)
    if user:
        msg: str = f"–ü—Ä–∏–≤–µ—Ç {user.first_name} {user.last_name} üëãÔ∏è\n\n" \
                   "–Ø <b>—Å–ø–æ—Ä—Ç-–±–æ—Ç</b>, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å" \
                   "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
    else:
        msg: str = "–í–≤–µ–¥–∏—Ç–µ /my_health, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n" \
                   "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <b>—Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="HTML")


async def account(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        msg = user.message
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.reply(msg, parse_mode="HTML")


async def subscribe(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.create_subscriber(instance, token)
        msg: str = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    await message.answer(msg)


async def programs(message: types.Message, state: FSMContext):
    await state.finish()
    await Telegram.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await ProgramState.program_filter.set()


async def nutritions(message: types.Message, state: FSMContext):
    await state.finish()
    await Telegram.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await NutritionState.nutrition_filter.set()


async def my_health(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        if subscriber := user.subscriber:
            await message.reply(
                subscriber.message,
                parse_mode="HTML",
                reply_markup=create_my_health_keyboard(
                    sport_nutrition=subscriber.sport_nutrition if subscriber.sport_nutrition else 0,
                    training_program=subscriber.training_program if subscriber.training_program else 0
                )
            )
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def update_my_health(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç üë∂Ô∏è-üßìÔ∏è",
    )
    await SubscribeState.age.set()


async def calculate_calories(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        subscriber: Subscriber = (await client.get_user(instance, token, cache=True)).subscriber
        if subscriber.is_kfc_valid:
            await Telegram.send_message(call.from_user.id, "–ö–∞–∫–∞—è —É –í–∞—Å –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?", reply_markup=activity_keyboard)
            await state.update_data({
                    'age': subscriber.age,
                    'weight': subscriber.weight, 
                    'height': subscriber.height,
                    'gender': subscriber.gender 
                })
            await CaloriesState.activity.set()
        else:
            await Telegram.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!")
    else:
        await Telegram.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def buy_content(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    await call.answer("–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –¥—Ä—É–≥–æ–π!", show_alert=True)
    data = {key: value for key, value in callback_data.items() if value.isnumeric()}
    if await update_subscribe(call.from_user, data):
        await call.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    else:
        await call.message.edit_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –±—ã–ª –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


async def program(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    instance = await get_program(call.from_user, {"id": int(callback_data.get("id", 0))})
    if isinstance(instance, TrainingProgram):
        await call.message.answer(instance.message, parse_mode="HTML")
    else:
        msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n" \
              "–í–≤–µ–¥–∏—Ç–µ /programs, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
        await call.message.answer(msg)


async def nutrition(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    instance = await get_nutrition(call.from_user, {"id": int(callback_data.get("id", 0))})
    if isinstance(instance, Nutrition):
        await call.message.answer(instance.message, parse_mode="HTML")
    else:
        msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\n" \
              "–í–≤–µ–¥–∏—Ç–µ /nutritions, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        await call.message.answer(msg)


async def schedule(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    msg = "–°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏\n " \
          "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n" \
          "(—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)"
    await Telegram.send_message(
        call.message.chat.id,
        msg,
        reply_markup=start_schedule_keyboard
    )
    await state.update_data({"program_id": int(callback_data.get("program_id", 0))})
    await ScheduleState.weekdays.set()


async def disable_schedule(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if scheduler.get_job(str(call.from_user.id)):
        scheduler.remove_job(str(call.from_user.id))
    await Telegram.send_message(
        call.from_user.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!"
    )


async def approaches(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()

    instance: TelegramUser = create_anonymous_user(message.chat)
    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        if subscriber := user.subscriber:
            if program_id := subscriber.training_program:
                trainings = iter(Iterable([
                    training.id for training in
                    await get_trainings({"program_id": program_id})
                ]))
                if trainings.loop:
                    instances = iter(
                        Cycle(await get_approaches(
                            message.from_user, {"training_id": next(trainings)}
                        ))
                    )
                    approach = next(instances)
                    await Telegram.send_message(
                        message.from_user.id, approach.message,
                        reply_markup=create_training_keyboard(), parse_mode="HTML"
                    )
                    await state.update_data({"trainings": trainings, "approaches": instances})
                    await ApproachState.next_approach.set()
                else:
                    await message.reply(
                        "–¢–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
            else:
                await message.reply(
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º /programs"
                )
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
