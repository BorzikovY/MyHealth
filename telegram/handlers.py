import asyncio
from typing import List

from aiogram import types

from api import ApiClient, create_anonymous_user, register_user, create_admin_user
from keyboards import start_keyboard, create_filter_keyboard
from models import TelegramUser, Token, TrainingProgram, Nutrition, Training


async def send_welcome(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    await register_user(client, instance)
    msg: str = "–ü—Ä–∏–≤–µ—Ç üëãÔ∏è –Ø *—Å–ø–æ—Ä—Ç\-–±–æ—Ç*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å\n" \
               "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="MarkdownV2")


async def get_account_info(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        msg = user.message
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.reply(msg, parse_mode="HTML")


async def subscribe(call: types.CallbackQuery):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.create_subscriber(instance, token)
        msg: str = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await call.message.answer(msg)


async def get_programs(message: types.Message, data: dict = None):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        instances: list[TrainingProgram] = await client.get_programs(instance, token, data=data, cache=True)
        for program in instances:
            program_keyboard = types.InlineKeyboardMarkup(2).add(
                types.InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚úÖÔ∏è", callback_data="subscribe"),
                types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="program")
            )
            await message.reply(program.message,
                                reply_markup=program_keyboard,
                                parse_mode="HTML")
        msg = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º üóíÔ∏è" if instances else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç üòîÔ∏è"
        await message.reply(msg,
                            reply_markup=create_filter_keyboard(len(instances)))
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def get_nutritions(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        nutritions: List[Nutrition] = await client.get_nutritions(instance, token)
        msg = "–°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫"
        for nutrition in nutritions:
            msg += f"\n\n{nutrition.name}:\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {nutrition.description}"
        await message.reply(msg if msg else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_trainings(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_admin_user()

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        trainings: List[Training] = await client.get_trainings(instance, token)
        msg = "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        for training in trainings:
            msg += f"\n\n{training.name}:\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {training.description}"
        await message.reply(msg if msg else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_program(call: types.CallbackQuery):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(data=call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        program: TrainingProgram = await client.get_program(instance, token)
        msg: str = f"{program.name}\n" \
                   f"{program.description}\n" \
                   f"{program.image}\n"\
                   f"–ö–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å: {program.weeks}\n"\
                   f"–ö–æ–ª-–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {program.training_count}\n"\
                   f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {program.avg_training_time}\n"\
                   f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {program.difficulty}n"
        await call.message.answer(msg if msg else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")


async def get_nutrition(call: types.CallbackQuery):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(call.message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        nutrition: Nutrition = await client.get_nutrition(instance, token)
        msg: str = f"{nutrition.name}\n" \
                   f"{nutrition.description}\n" \
                   f"{nutrition.dosages}\n"\
                   f"–ö–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å: {nutrition.use}\n"\
                   f"–ö–æ–ª-–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {nutrition.contraindications}\n"
        await call.message.answer(msg if msg else "–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç(")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")
