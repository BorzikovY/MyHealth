from aiogram import types
from aiogram.dispatcher import FSMContext

from api import (
    ApiClient,
    create_anonymous_user,
    register_user,
    update_subscribe,
    get_program,
    get_nutrition, get_approaches
)
from keyboards import (
    start_keyboard,
    create_my_health_keyboard,
    filter_keyboard,
    start_schedule_keyboard, move_buttons
)
from notifications import scheduler
from states import (
    ProgramState,
    NutritionState,
    SubscribeState,
    ScheduleState,
    ApproachState, Cycle
)
from models import (
    TelegramUser,
    Token,
    TrainingProgram,
    Nutrition,
)


async def start(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    await register_user(client, instance)
    msg: str = "–ü—Ä–∏–≤–µ—Ç üëãÔ∏è –Ø *—Å–ø–æ—Ä—Ç\-–±–æ—Ç*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å\n" \
               "–ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"

    await message.reply(msg, reply_markup=start_keyboard, parse_mode="MarkdownV2")


async def account(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.from_user)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        msg = user.message
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    await message.reply(msg, parse_mode="HTML")


async def subscribe(message: types.Message, state: FSMContext):
    await state.finish()
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        await client.create_subscriber(instance, token)
        msg: str = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"
    else:
        msg = "–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    await message.answer(msg)


async def programs(message: types.Message, state: FSMContext):
    await state.finish()
    await message.bot.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await ProgramState.program_filter.set()


async def nutritions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.bot.send_message(
        message.from_user.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=filter_keyboard
    )
    await NutritionState.nutrition_filter.set()


async def my_health(message: types.Message):
    client = ApiClient()
    instance: TelegramUser = create_anonymous_user(message.chat)

    token: Token = await client.get_token(instance)
    if isinstance(token, Token):
        user: TelegramUser = await client.get_user(instance, token, cache=True)
        if subscriber := user.subscriber:
            await message.reply(
                subscriber.message,
                parse_mode="HTML",
                reply_markup=create_my_health_keyboard(
                    sport_nutrition=subscriber.sport_nutrition,
                    training_program=subscriber.training_program
                )
            )
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


async def update_my_health(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç üë∂Ô∏è-üßìÔ∏è",
    )
    await SubscribeState.age.set()


async def buy_content(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    data = {key: value for key, value in callback_data.items() if value.isnumeric()}
    if await update_subscribe(call.from_user, data):
        await call.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    else:
        await call.message.edit_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –±—ã–ª –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


async def program(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    instance = await get_program(call.from_user, {"id": int(callback_data.get("id", 0))})
    if isinstance(instance, TrainingProgram):
        await call.message.answer(instance.message, parse_mode="HTML")
    else:
        msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n" \
              "–í–≤–µ–¥–∏—Ç–µ /programs, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
        await call.message.answer(msg)


async def nutrition(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    instance = await get_nutrition(call.from_user, {"id": int(callback_data.get("id", 0))})
    if isinstance(instance, Nutrition):
        await call.message.answer(instance.message, parse_mode="HTML")
    else:
        msg = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\n" \
              "–í–≤–µ–¥–∏—Ç–µ /nutritions, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        await call.message.answer(msg)


async def schedule(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    msg = "–°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏\n " \
          "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n" \
          "(—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)"
    await call.bot.send_message(
        call.message.chat.id,
        msg,
        reply_markup=start_schedule_keyboard
    )
    await state.update_data({"program_id": int(callback_data.get("program_id", 0))})
    await ScheduleState.weekdays.set()


async def approaches(message: types.Message, state: FSMContext):
    await state.finish()
    job = scheduler.get_job(str(message.from_user.id))
    if trainings := job.kwargs.get("trainings"):
        instances = iter(Cycle(await get_approaches(
            message.from_user,
            {"training_id": trainings.current}
        )))
        if instances.loop:
            approach = instances.__next__(0)
            await message.delete()
            await message.bot.send_message(
                message.from_user.id, approach.message,
                reply_markup=types.InlineKeyboardMarkup().add(
                    *move_buttons
                ), parse_mode="HTML"
            )
            await state.update_data({"approaches": instances})
            await ApproachState.next_approach.set()
        else:
            await message.reply(
                "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    else:
        await message.reply(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ–Ω—é /my_health"
        )


