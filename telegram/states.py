from datetime import timedelta

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from handlers import get_programs, get_nutritions, update_subscribe
from keyboards import (
    schedule_keyboard,
    start_schedule_keyboard,
    gender_keyboard,
    start_program_keyboard,
    create_op_keyboard
)


class ProgramFilter(StatesGroup):
    difficulty_value: State = State()
    difficulty_op: State = State()
    weeks_value: State = State()
    weeks_op: State = State()
    finish_filter: State = State()


class SubscribeState(StatesGroup):
    age: State = State()
    height: State = State()
    weight: State = State()
    gender: State = State()


class ScheduleState(StatesGroup):
    weekdays: State = State()
    time: State = State()


async def start_schedule_filter(call: types.CallbackQuery):
    msg = "–°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏\n " \
          "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n" \
          "(—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É)"
    await call.bot.send_message(
        call.message.chat.id,
        msg,
        reply_markup=start_schedule_keyboard
    )
    await ScheduleState.weekdays.set()


async def get_weekdays(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_data.get("filter", "0") == "1":
        await call.bot.send_message(
            call.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
            reply_markup=schedule_keyboard
        )
        await ScheduleState.weekdays.set()
    else:
        data = await state.get_data()
        if not data.get("weekdays"):
            await state.update_data({"weekdays": [0, 1, 2, 3, 4]})
        await call.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        await ScheduleState.next()


async def get_time(message: types.Message, state: FSMContext):
    try:
        hours, minutes = (int(value) for value in message.text.split(":"))
        time = timedelta(hours=hours, minutes=minutes)
        assert timedelta(hours=0, minutes=0) <= time <= timedelta(hours=23, minutes=59)
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.finish()
    except Exception as error:
        print(error)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç 00:00 –¥–æ 23:59")
        await ScheduleState.time.set()


async def start_subscribe_filter(call: types.CallbackQuery):
    await call.bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç üë∂Ô∏è-üßìÔ∏è",
    )
    await SubscribeState.age.set()


async def get_age(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        assert 0 <= value <= 100
        await state.update_data(age=value)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç üìèÔ∏è (–≤ –º–µ—Ç—Ä–∞—Ö)")
        await SubscribeState.next()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        await SubscribeState.height.set()


async def get_height(message: types.Message, state: FSMContext):
    try:
        value = float(message.text)
        assert 1. <= value <= 3.
        await state.update_data(height=value)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å ‚öñÔ∏è (–≤ –∫–≥)")
        await SubscribeState.next()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
        await SubscribeState.height.set()


async def get_weight(message: types.Message, state: FSMContext):
    try:
        value = float(message.text)
        assert 20. <= value <= 220.
        await state.update_data(weight=value)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä üë®Ô∏è/üë©Ô∏è/üöÅÔ∏è", reply_markup=gender_keyboard)
        await SubscribeState.next()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 220")
        await SubscribeState.weight.set()


async def get_gender(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    data["gender"] = callback_data.get("gender")
    data["message"] = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! üòâÔ∏è"
    await update_subscribe(call.message, data)
    await state.finish()


async def nutrition_filter_start(call: types.CallbackQuery):
    await get_nutritions(call.message)


async def start_program_filter(call: types.CallbackQuery):
    await call.bot.send_message(
        call.message.chat.id,
        "–í–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=start_program_keyboard
    )
    await ProgramFilter.difficulty_value.set()


async def get_difficulty_value(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_data.get("filter", "0") == "1":
        await call.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–æ—Ç 1.00 –¥–æ 5.00)")
        await ProgramFilter.next()
    else:
        await get_programs(call.message)
        await state.finish()


async def get_difficulty_op(message: types.Message, state: FSMContext):
    try:
        value = float(message.text)
        assert 1 <= value <= 5
        await state.update_data(difficulty=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —á–∏—Å–ª–æ–º",
            reply_markup=create_op_keyboard("difficulty", value)
        )
        await ProgramFilter.next()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        await ProgramFilter.difficulty_op.set()


async def get_weeks_value(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    await state.update_data(difficulty=callback_data.get("difficulty") + data.get("difficulty"))
    await call.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å")
    await ProgramFilter.next()


async def get_weeks_op(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        assert value > 0
        await state.update_data(weeks=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —á–∏—Å–ª–æ–º",
            reply_markup=create_op_keyboard("weeks", value)
        )
        await ProgramFilter.next()
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        await ProgramFilter.weeks_op.set()


async def finish_program_filter(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    data["weeks"] = callback_data.get("weeks") + data.get("weeks")
    await get_programs(call.message, data)
    await state.finish()
