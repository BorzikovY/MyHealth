from typing import Optional, List

from aiogram.types import (
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from models import TrainingProgram, Nutrition


class Move(CallbackData, prefix="move"):
    direction: int = 1


class ID(CallbackData, prefix="id"):
    id: Optional[int] = None


class Content(CallbackData, prefix="content"):
    training_program: Optional[int] = None
    sport_nutrition: Optional[int] = None


class Schedule(CallbackData, prefix="schedule"):
    filtered: bool = True
    text: Optional[str] = None
    weekday: Optional[int] = None


class Program(CallbackData, prefix="content"):
    filtered: bool = True
    difficulty: Optional[str] = None
    weeks: Optional[str] = None


class Activity(CallbackData, prefix="activity"):
    value: float


class Info(CallbackData, prefix="info"):
    section: str


class Subscriber(CallbackData, prefix="subscriber"):
    gender: str = "helicopter"


def move_buttons() -> List[InlineKeyboardButton]:
    return [
        {"text": "‚óÄÔ∏è", "callback_data": Move(direction=-1)},
        {"text": "–ó–∞–∫—Ä—ã—Ç—å", "callback_data": 'quit'},
        {"text": "‚ñ∂Ô∏è", "callback_data": Move(direction=1)}
    ]


def create_op_keyboard(param: str, value):
    keyboard_builder = InlineKeyboardBuilder()
    if param in ["difficulty", "weeks"]:
        keyboard_builder.button(text="üîºÔ∏è", callback_data=Program(**{param: ">"}))
        keyboard_builder.button(text=f"{value}", callback_data=Program(**{param: "="}))
        keyboard_builder.button(text="üîΩÔ∏è", callback_data=Program(**{param: "<"}))
    keyboard_builder.adjust(3)
    return keyboard_builder.as_markup()


def create_training_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=Move(direction=0))
    for button in move_buttons():
        keyboard_builder.button(**button)
    keyboard_builder.adjust(1, 3)
    return keyboard_builder.as_markup()


def create_move_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–ù–∞–∑–∞–¥", callback_data=Move(direction=0))
    for button in move_buttons():
        keyboard_builder.button(**button)
    keyboard_builder.adjust(1, 3)
    return keyboard_builder.as_markup()


def create_content_keyboard(content: TrainingProgram | Nutrition, **kwargs):
    keyboard_builder = InlineKeyboardBuilder()

    first_line = 1
    keyboard_builder.button(
        text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ...",
        callback_data=Move(
            direction=0
        )
    )
    if kwargs.get("sport_nutrition") or kwargs.get("training_program"):
        first_line += 1
        keyboard_builder.button(
            text=f"{content.price} —Ä—É–± üí∞Ô∏è" if content.price > 0. else "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚úÖÔ∏è",
            callback_data=Content(
                sport_nutrition=kwargs.get("sport_nutrition"),
                training_program=kwargs.get("training_program")
            )
        )
    for button in move_buttons():
        keyboard_builder.button(**button)
    keyboard_builder.adjust(first_line, 3)
    return keyboard_builder.as_markup()


def create_my_health_keyboard(enable=True, **kwargs):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(
        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=ID(**kwargs)
    )
    keyboard_builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_subscribe")
    if enable:
        keyboard_builder.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="set_schedule")
    else:
        keyboard_builder.button(text="–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="disable_schedule")

    keyboard_builder.button(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£", callback_data="calculate_calories")

    keyboard_builder.adjust(2, 2)
    return keyboard_builder.as_markup()


def start_callback_keyboard(filter_class: [Program | Schedule], texts: List[str]):
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text=texts[0], callback_data=filter_class(filtered=True))
    keyboard_builder.button(text=texts[1], callback_data=filter_class(filtered=False))

    keyboard_builder.adjust(2)
    return keyboard_builder.as_markup()


def create_gender_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–º—É–∂—Å–∫–æ–π", callback_data=Subscriber(gender="male"))
    keyboard_builder.button(text="–∂–µ–Ω—Å–∫–∏–π", callback_data=Subscriber(gender="female"))
    keyboard_builder.button(text="–¥—Ä—É–≥–æ–π", callback_data=Subscriber(gender="helicopter"))

    keyboard_builder.adjust(3)
    return keyboard_builder.as_markup()


def create_schedule_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–ø–Ω", callback_data=Schedule(weekday=0, text="–ø–Ω"))
    keyboard_builder.button(text="–≤—Ç", callback_data=Schedule(weekday=1, text="–≤—Ç"))
    keyboard_builder.button(text="—Å—Ä", callback_data=Schedule(weekday=2, text="—Å—Ä"))
    keyboard_builder.button(text="—á—Ç", callback_data=Schedule(weekday=3, text="—á—Ç"))
    keyboard_builder.button(text="–ø—Ç", callback_data=Schedule(weekday=4, text="–ø—Ç"))
    keyboard_builder.button(text="—Å–±", callback_data=Schedule(weekday=5, text="—Å–±"))
    keyboard_builder.button(text="–≤—Å", callback_data=Schedule(weekday=6, text="–≤—Å"))
    keyboard_builder.button(text="–ì–æ—Ç–æ–≤–æ!", callback_data=Schedule(filtered=False))

    keyboard_builder.adjust(3, 3, 2)
    return keyboard_builder.as_markup()


def create_activity_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data=Activity(value=1.2))
    keyboard_builder.button(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=Activity(value=1.375))
    keyboard_builder.button(text="–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=Activity(value=1.55))
    keyboard_builder.button(text="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data=Activity(value=1.725))
    keyboard_builder.button(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º", callback_data=Activity(value=1.9))

    keyboard_builder.adjust(2, 2, 1)
    return keyboard_builder.as_markup()


def create_info_keyboard():
    keyboard_builder = InlineKeyboardBuilder()

    keyboard_builder.button(text="–ú–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ ü´ÄÔ∏è", callback_data=Info(section='/my_health'))
    keyboard_builder.button(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìÉÔ∏è", callback_data=Info(section='/account'))
    keyboard_builder.button(text="–¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚è≥", callback_data=Info(section='/approaches'))

    keyboard_builder.adjust(1, 1, 1)
    return keyboard_builder.as_markup()


COMMANDS = {
    "subscribe": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üéÅ",
    "my_health": "–ú–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ ü´ÄÔ∏è",
    "account": "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìÉÔ∏è",
    "info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–µ–ª–∞—Ö ‚ùìÔ∏è",
    "programs": "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üéΩ",
    "nutritions": "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ü•ë",
    "approaches": "–¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚è≥"
}


start_keyboard = ReplyKeyboardMarkup(one_time_keyboard=False, keyboard=[
    [
        KeyboardButton(text=COMMANDS["subscribe"]),
        KeyboardButton(text=COMMANDS["my_health"]),
        KeyboardButton(text=COMMANDS["account"])
    ],
    [
        KeyboardButton(text=COMMANDS["info"])
    ],
    [
        KeyboardButton(text=COMMANDS["programs"]),
        KeyboardButton(text=COMMANDS["nutritions"]),
        KeyboardButton(text=COMMANDS["approaches"])
    ]
])

balance_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
    InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ü§ë", callback_data="payment")
]])