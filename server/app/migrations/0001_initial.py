# Generated by Django 4.2.3 on 2023-07-11 18:58

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.IntegerField(unique=True, verbose_name='Telegram id')),
                ('first_name', models.CharField(max_length=32, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=64, verbose_name='Фамилия')),
                ('balance', models.FloatField(blank=True, default=0.0, verbose_name='Баланс')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('description', models.CharField(max_length=256, verbose_name='Описание')),
                ('difficulty', models.FloatField(verbose_name='Сложность')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('description', models.CharField(max_length=256, verbose_name='Описание')),
                ('image', models.FileField(upload_to='./', verbose_name='Изображение')),
                ('weeks', models.SmallIntegerField(verbose_name='Кол-во недель')),
                ('trainings', models.ManyToManyField(related_query_name='training_programs', to='app.training', verbose_name='Тренировки')),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'мужчина'), ('female', 'женщина'), ('helicopter', 'вертолёт')], default='helicopter', max_length=10, verbose_name='Гендер')),
                ('age', models.SmallIntegerField(verbose_name='Возраст')),
                ('height', models.FloatField(verbose_name='Рост')),
                ('weight', models.FloatField(verbose_name='Вес')),
                ('telegram_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('description', models.CharField(max_length=256, verbose_name='Описание')),
                ('image', models.FileField(upload_to='./', verbose_name='Изображение')),
                ('video', models.FileField(upload_to='./', verbose_name='Видео')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approach', to='app.training', verbose_name='Тренировка')),
            ],
        ),
        migrations.CreateModel(
            name='Approach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField(verbose_name='Время выполнения')),
                ('repetition_count', models.SmallIntegerField(verbose_name='Кол-во повторений')),
                ('rest', models.TimeField(verbose_name='Время отдыха')),
                ('exercise', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='approach', to='app.exercise', verbose_name='Упражнение')),
            ],
        ),
    ]
